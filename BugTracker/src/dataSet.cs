//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace bugtracker {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dataSet : DataSet {
        
        private VIEW_BUGSDataTable tableVIEW_BUGS;
        
        private ProjectsDataTable tableProjects;
        
        public dataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["VIEW_BUGS"] != null)) {
                    this.Tables.Add(new VIEW_BUGSDataTable(ds.Tables["VIEW_BUGS"]));
                }
                if ((ds.Tables["Projects"] != null)) {
                    this.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VIEW_BUGSDataTable VIEW_BUGS {
            get {
                return this.tableVIEW_BUGS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectsDataTable Projects {
            get {
                return this.tableProjects;
            }
        }
        
        public override DataSet Clone() {
            dataSet cln = ((dataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["VIEW_BUGS"] != null)) {
                this.Tables.Add(new VIEW_BUGSDataTable(ds.Tables["VIEW_BUGS"]));
            }
            if ((ds.Tables["Projects"] != null)) {
                this.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableVIEW_BUGS = ((VIEW_BUGSDataTable)(this.Tables["VIEW_BUGS"]));
            if ((this.tableVIEW_BUGS != null)) {
                this.tableVIEW_BUGS.InitVars();
            }
            this.tableProjects = ((ProjectsDataTable)(this.Tables["Projects"]));
            if ((this.tableProjects != null)) {
                this.tableProjects.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableVIEW_BUGS = new VIEW_BUGSDataTable();
            this.Tables.Add(this.tableVIEW_BUGS);
            this.tableProjects = new ProjectsDataTable();
            this.Tables.Add(this.tableProjects);
        }
        
        private bool ShouldSerializeVIEW_BUGS() {
            return false;
        }
        
        private bool ShouldSerializeProjects() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void VIEW_BUGSRowChangeEventHandler(object sender, VIEW_BUGSRowChangeEvent e);
        
        public delegate void ProjectsRowChangeEventHandler(object sender, ProjectsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_BUGSDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProjectID;
            
            private DataColumn columnID;
            
            private DataColumn columnPriority;
            
            private DataColumn columnSeverity;
            
            private DataColumn columnStatus;
            
            private DataColumn columnAssigned;
            
            private DataColumn columnDescription;
            
            private DataColumn columnColor;
            
            private DataColumn columnTITLE;
            
            internal VIEW_BUGSDataTable() : 
                    base("VIEW_BUGS") {
                this.InitClass();
            }
            
            internal VIEW_BUGSDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            internal DataColumn SeverityColumn {
                get {
                    return this.columnSeverity;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn AssignedColumn {
                get {
                    return this.columnAssigned;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            internal DataColumn TITLEColumn {
                get {
                    return this.columnTITLE;
                }
            }
            
            public VIEW_BUGSRow this[int index] {
                get {
                    return ((VIEW_BUGSRow)(this.Rows[index]));
                }
            }
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowChanged;
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowChanging;
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowDeleted;
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowDeleting;
            
            public void AddVIEW_BUGSRow(VIEW_BUGSRow row) {
                this.Rows.Add(row);
            }
            
            public VIEW_BUGSRow AddVIEW_BUGSRow(int ProjectID, string Priority, string Severity, string Status, string Assigned, string Description, string Color, string TITLE) {
                VIEW_BUGSRow rowVIEW_BUGSRow = ((VIEW_BUGSRow)(this.NewRow()));
                rowVIEW_BUGSRow.ItemArray = new object[] {
                        ProjectID,
                        null,
                        Priority,
                        Severity,
                        Status,
                        Assigned,
                        Description,
                        Color,
                        TITLE};
                this.Rows.Add(rowVIEW_BUGSRow);
                return rowVIEW_BUGSRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VIEW_BUGSDataTable cln = ((VIEW_BUGSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VIEW_BUGSDataTable();
            }
            
            internal void InitVars() {
                this.columnProjectID = this.Columns["ProjectID"];
                this.columnID = this.Columns["ID"];
                this.columnPriority = this.Columns["Priority"];
                this.columnSeverity = this.Columns["Severity"];
                this.columnStatus = this.Columns["Status"];
                this.columnAssigned = this.Columns["Assigned"];
                this.columnDescription = this.Columns["Description"];
                this.columnColor = this.Columns["Color"];
                this.columnTITLE = this.Columns["TITLE"];
            }
            
            private void InitClass() {
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectID);
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnPriority = new DataColumn("Priority", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriority);
                this.columnSeverity = new DataColumn("Severity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSeverity);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnAssigned = new DataColumn("Assigned", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssigned);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnColor = new DataColumn("Color", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColor);
                this.columnTITLE = new DataColumn("TITLE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTITLE);
                this.columnProjectID.AllowDBNull = false;
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnDescription.AllowDBNull = false;
                this.columnTITLE.AllowDBNull = false;
            }
            
            public VIEW_BUGSRow NewVIEW_BUGSRow() {
                return ((VIEW_BUGSRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VIEW_BUGSRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VIEW_BUGSRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VIEW_BUGSRowChanged != null)) {
                    this.VIEW_BUGSRowChanged(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VIEW_BUGSRowChanging != null)) {
                    this.VIEW_BUGSRowChanging(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VIEW_BUGSRowDeleted != null)) {
                    this.VIEW_BUGSRowDeleted(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VIEW_BUGSRowDeleting != null)) {
                    this.VIEW_BUGSRowDeleting(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVIEW_BUGSRow(VIEW_BUGSRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_BUGSRow : DataRow {
            
            private VIEW_BUGSDataTable tableVIEW_BUGS;
            
            internal VIEW_BUGSRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVIEW_BUGS = ((VIEW_BUGSDataTable)(this.Table));
            }
            
            public int ProjectID {
                get {
                    return ((int)(this[this.tableVIEW_BUGS.ProjectIDColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.ProjectIDColumn] = value;
                }
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableVIEW_BUGS.IDColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.IDColumn] = value;
                }
            }
            
            public string Priority {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.PriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.PriorityColumn] = value;
                }
            }
            
            public string Severity {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.SeverityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.SeverityColumn] = value;
                }
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.StatusColumn] = value;
                }
            }
            
            public string Assigned {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.AssignedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.AssignedColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableVIEW_BUGS.DescriptionColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.DescriptionColumn] = value;
                }
            }
            
            public string Color {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.ColorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.ColorColumn] = value;
                }
            }
            
            public string TITLE {
                get {
                    return ((string)(this[this.tableVIEW_BUGS.TITLEColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.TITLEColumn] = value;
                }
            }
            
            public bool IsPriorityNull() {
                return this.IsNull(this.tableVIEW_BUGS.PriorityColumn);
            }
            
            public void SetPriorityNull() {
                this[this.tableVIEW_BUGS.PriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsSeverityNull() {
                return this.IsNull(this.tableVIEW_BUGS.SeverityColumn);
            }
            
            public void SetSeverityNull() {
                this[this.tableVIEW_BUGS.SeverityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableVIEW_BUGS.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableVIEW_BUGS.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignedNull() {
                return this.IsNull(this.tableVIEW_BUGS.AssignedColumn);
            }
            
            public void SetAssignedNull() {
                this[this.tableVIEW_BUGS.AssignedColumn] = System.Convert.DBNull;
            }
            
            public bool IsColorNull() {
                return this.IsNull(this.tableVIEW_BUGS.ColorColumn);
            }
            
            public void SetColorNull() {
                this[this.tableVIEW_BUGS.ColorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_BUGSRowChangeEvent : EventArgs {
            
            private VIEW_BUGSRow eventRow;
            
            private DataRowAction eventAction;
            
            public VIEW_BUGSRowChangeEvent(VIEW_BUGSRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VIEW_BUGSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIDProject;
            
            private DataColumn columnName;
            
            internal ProjectsDataTable() : 
                    base("Projects") {
                this.InitClass();
            }
            
            internal ProjectsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDProjectColumn {
                get {
                    return this.columnIDProject;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public ProjectsRow this[int index] {
                get {
                    return ((ProjectsRow)(this.Rows[index]));
                }
            }
            
            public event ProjectsRowChangeEventHandler ProjectsRowChanged;
            
            public event ProjectsRowChangeEventHandler ProjectsRowChanging;
            
            public event ProjectsRowChangeEventHandler ProjectsRowDeleted;
            
            public event ProjectsRowChangeEventHandler ProjectsRowDeleting;
            
            public void AddProjectsRow(ProjectsRow row) {
                this.Rows.Add(row);
            }
            
            public ProjectsRow AddProjectsRow(string Name) {
                ProjectsRow rowProjectsRow = ((ProjectsRow)(this.NewRow()));
                rowProjectsRow.ItemArray = new object[] {
                        null,
                        Name};
                this.Rows.Add(rowProjectsRow);
                return rowProjectsRow;
            }
            
            public ProjectsRow FindByIDProject(int IDProject) {
                return ((ProjectsRow)(this.Rows.Find(new object[] {
                            IDProject})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProjectsDataTable cln = ((ProjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProjectsDataTable();
            }
            
            internal void InitVars() {
                this.columnIDProject = this.Columns["IDProject"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnIDProject = new DataColumn("IDProject", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIDProject);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnIDProject}, true));
                this.columnIDProject.AutoIncrement = true;
                this.columnIDProject.AllowDBNull = false;
                this.columnIDProject.ReadOnly = true;
                this.columnIDProject.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            public ProjectsRow NewProjectsRow() {
                return ((ProjectsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProjectsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProjectsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectsRowChanged != null)) {
                    this.ProjectsRowChanged(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectsRowChanging != null)) {
                    this.ProjectsRowChanging(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectsRowDeleted != null)) {
                    this.ProjectsRowDeleted(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectsRowDeleting != null)) {
                    this.ProjectsRowDeleting(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProjectsRow(ProjectsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectsRow : DataRow {
            
            private ProjectsDataTable tableProjects;
            
            internal ProjectsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjects = ((ProjectsDataTable)(this.Table));
            }
            
            public int IDProject {
                get {
                    return ((int)(this[this.tableProjects.IDProjectColumn]));
                }
                set {
                    this[this.tableProjects.IDProjectColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableProjects.NameColumn]));
                }
                set {
                    this[this.tableProjects.NameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectsRowChangeEvent : EventArgs {
            
            private ProjectsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProjectsRowChangeEvent(ProjectsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProjectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
