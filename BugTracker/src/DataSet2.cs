//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace bugtracker {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet2 : DataSet {
        
        private BUGDataTable tableBUG;
        
        public DataSet2() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet2(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BUG"] != null)) {
                    this.Tables.Add(new BUGDataTable(ds.Tables["BUG"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BUGDataTable BUG {
            get {
                return this.tableBUG;
            }
        }
        
        public override DataSet Clone() {
            DataSet2 cln = ((DataSet2)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["BUG"] != null)) {
                this.Tables.Add(new BUGDataTable(ds.Tables["BUG"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBUG = ((BUGDataTable)(this.Tables["BUG"]));
            if ((this.tableBUG != null)) {
                this.tableBUG.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet2";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet2.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBUG = new BUGDataTable();
            this.Tables.Add(this.tableBUG);
        }
        
        private bool ShouldSerializeBUG() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void BUGRowChangeEventHandler(object sender, BUGRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BUGDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnSTATEID;
            
            private DataColumn columnPRIORITYID;
            
            private DataColumn columnSEVERITYID;
            
            private DataColumn columnASSIGNEDUSERID;
            
            private DataColumn columnDESCRIPTION;
            
            private DataColumn columnProjectID;
            
            internal BUGDataTable() : 
                    base("BUG") {
                this.InitClass();
            }
            
            internal BUGDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn STATEIDColumn {
                get {
                    return this.columnSTATEID;
                }
            }
            
            internal DataColumn PRIORITYIDColumn {
                get {
                    return this.columnPRIORITYID;
                }
            }
            
            internal DataColumn SEVERITYIDColumn {
                get {
                    return this.columnSEVERITYID;
                }
            }
            
            internal DataColumn ASSIGNEDUSERIDColumn {
                get {
                    return this.columnASSIGNEDUSERID;
                }
            }
            
            internal DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            internal DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            public BUGRow this[int index] {
                get {
                    return ((BUGRow)(this.Rows[index]));
                }
            }
            
            public event BUGRowChangeEventHandler BUGRowChanged;
            
            public event BUGRowChangeEventHandler BUGRowChanging;
            
            public event BUGRowChangeEventHandler BUGRowDeleted;
            
            public event BUGRowChangeEventHandler BUGRowDeleting;
            
            public void AddBUGRow(BUGRow row) {
                this.Rows.Add(row);
            }
            
            public BUGRow AddBUGRow(System.Guid STATEID, System.Guid PRIORITYID, System.Guid SEVERITYID, System.Guid ASSIGNEDUSERID, string DESCRIPTION, int ProjectID) {
                BUGRow rowBUGRow = ((BUGRow)(this.NewRow()));
                rowBUGRow.ItemArray = new object[] {
                        null,
                        STATEID,
                        PRIORITYID,
                        SEVERITYID,
                        ASSIGNEDUSERID,
                        DESCRIPTION,
                        ProjectID};
                this.Rows.Add(rowBUGRow);
                return rowBUGRow;
            }
            
            public BUGRow FindByID(int ID) {
                return ((BUGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BUGDataTable cln = ((BUGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BUGDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnSTATEID = this.Columns["STATEID"];
                this.columnPRIORITYID = this.Columns["PRIORITYID"];
                this.columnSEVERITYID = this.Columns["SEVERITYID"];
                this.columnASSIGNEDUSERID = this.Columns["ASSIGNEDUSERID"];
                this.columnDESCRIPTION = this.Columns["DESCRIPTION"];
                this.columnProjectID = this.Columns["ProjectID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnSTATEID = new DataColumn("STATEID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATEID);
                this.columnPRIORITYID = new DataColumn("PRIORITYID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIORITYID);
                this.columnSEVERITYID = new DataColumn("SEVERITYID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSEVERITYID);
                this.columnASSIGNEDUSERID = new DataColumn("ASSIGNEDUSERID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnASSIGNEDUSERID);
                this.columnDESCRIPTION = new DataColumn("DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDESCRIPTION);
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnSTATEID.AllowDBNull = false;
                this.columnPRIORITYID.AllowDBNull = false;
                this.columnSEVERITYID.AllowDBNull = false;
                this.columnDESCRIPTION.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            public BUGRow NewBUGRow() {
                return ((BUGRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BUGRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BUGRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BUGRowChanged != null)) {
                    this.BUGRowChanged(this, new BUGRowChangeEvent(((BUGRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BUGRowChanging != null)) {
                    this.BUGRowChanging(this, new BUGRowChangeEvent(((BUGRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BUGRowDeleted != null)) {
                    this.BUGRowDeleted(this, new BUGRowChangeEvent(((BUGRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BUGRowDeleting != null)) {
                    this.BUGRowDeleting(this, new BUGRowChangeEvent(((BUGRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBUGRow(BUGRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BUGRow : DataRow {
            
            private BUGDataTable tableBUG;
            
            internal BUGRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBUG = ((BUGDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableBUG.IDColumn]));
                }
                set {
                    this[this.tableBUG.IDColumn] = value;
                }
            }
            
            public System.Guid STATEID {
                get {
                    return ((System.Guid)(this[this.tableBUG.STATEIDColumn]));
                }
                set {
                    this[this.tableBUG.STATEIDColumn] = value;
                }
            }
            
            public System.Guid PRIORITYID {
                get {
                    return ((System.Guid)(this[this.tableBUG.PRIORITYIDColumn]));
                }
                set {
                    this[this.tableBUG.PRIORITYIDColumn] = value;
                }
            }
            
            public System.Guid SEVERITYID {
                get {
                    return ((System.Guid)(this[this.tableBUG.SEVERITYIDColumn]));
                }
                set {
                    this[this.tableBUG.SEVERITYIDColumn] = value;
                }
            }
            
            public System.Guid ASSIGNEDUSERID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableBUG.ASSIGNEDUSERIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUG.ASSIGNEDUSERIDColumn] = value;
                }
            }
            
            public string DESCRIPTION {
                get {
                    return ((string)(this[this.tableBUG.DESCRIPTIONColumn]));
                }
                set {
                    this[this.tableBUG.DESCRIPTIONColumn] = value;
                }
            }
            
            public int ProjectID {
                get {
                    return ((int)(this[this.tableBUG.ProjectIDColumn]));
                }
                set {
                    this[this.tableBUG.ProjectIDColumn] = value;
                }
            }
            
            public bool IsASSIGNEDUSERIDNull() {
                return this.IsNull(this.tableBUG.ASSIGNEDUSERIDColumn);
            }
            
            public void SetASSIGNEDUSERIDNull() {
                this[this.tableBUG.ASSIGNEDUSERIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BUGRowChangeEvent : EventArgs {
            
            private BUGRow eventRow;
            
            private DataRowAction eventAction;
            
            public BUGRowChangeEvent(BUGRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BUGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
