//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace bugtracker {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet4 : DataSet {
        
        private SEVERITYDataTable tableSEVERITY;
        
        public DataSet4() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet4(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SEVERITY"] != null)) {
                    this.Tables.Add(new SEVERITYDataTable(ds.Tables["SEVERITY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SEVERITYDataTable SEVERITY {
            get {
                return this.tableSEVERITY;
            }
        }
        
        public override DataSet Clone() {
            DataSet4 cln = ((DataSet4)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SEVERITY"] != null)) {
                this.Tables.Add(new SEVERITYDataTable(ds.Tables["SEVERITY"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSEVERITY = ((SEVERITYDataTable)(this.Tables["SEVERITY"]));
            if ((this.tableSEVERITY != null)) {
                this.tableSEVERITY.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet4";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet4.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSEVERITY = new SEVERITYDataTable();
            this.Tables.Add(this.tableSEVERITY);
        }
        
        private bool ShouldSerializeSEVERITY() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SEVERITYRowChangeEventHandler(object sender, SEVERITYRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SEVERITYDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnNAME;
            
            internal SEVERITYDataTable() : 
                    base("SEVERITY") {
                this.InitClass();
            }
            
            internal SEVERITYDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            public SEVERITYRow this[int index] {
                get {
                    return ((SEVERITYRow)(this.Rows[index]));
                }
            }
            
            public event SEVERITYRowChangeEventHandler SEVERITYRowChanged;
            
            public event SEVERITYRowChangeEventHandler SEVERITYRowChanging;
            
            public event SEVERITYRowChangeEventHandler SEVERITYRowDeleted;
            
            public event SEVERITYRowChangeEventHandler SEVERITYRowDeleting;
            
            public void AddSEVERITYRow(SEVERITYRow row) {
                this.Rows.Add(row);
            }
            
            public SEVERITYRow AddSEVERITYRow(System.Guid ID, string NAME) {
                SEVERITYRow rowSEVERITYRow = ((SEVERITYRow)(this.NewRow()));
                rowSEVERITYRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowSEVERITYRow);
                return rowSEVERITYRow;
            }
            
            public SEVERITYRow FindByID(System.Guid ID) {
                return ((SEVERITYRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SEVERITYDataTable cln = ((SEVERITYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SEVERITYDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnNAME = this.Columns["NAME"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnNAME = new DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNAME);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
            }
            
            public SEVERITYRow NewSEVERITYRow() {
                return ((SEVERITYRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SEVERITYRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SEVERITYRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SEVERITYRowChanged != null)) {
                    this.SEVERITYRowChanged(this, new SEVERITYRowChangeEvent(((SEVERITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SEVERITYRowChanging != null)) {
                    this.SEVERITYRowChanging(this, new SEVERITYRowChangeEvent(((SEVERITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SEVERITYRowDeleted != null)) {
                    this.SEVERITYRowDeleted(this, new SEVERITYRowChangeEvent(((SEVERITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SEVERITYRowDeleting != null)) {
                    this.SEVERITYRowDeleting(this, new SEVERITYRowChangeEvent(((SEVERITYRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSEVERITYRow(SEVERITYRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SEVERITYRow : DataRow {
            
            private SEVERITYDataTable tableSEVERITY;
            
            internal SEVERITYRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSEVERITY = ((SEVERITYDataTable)(this.Table));
            }
            
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tableSEVERITY.IDColumn]));
                }
                set {
                    this[this.tableSEVERITY.IDColumn] = value;
                }
            }
            
            public string NAME {
                get {
                    return ((string)(this[this.tableSEVERITY.NAMEColumn]));
                }
                set {
                    this[this.tableSEVERITY.NAMEColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SEVERITYRowChangeEvent : EventArgs {
            
            private SEVERITYRow eventRow;
            
            private DataRowAction eventAction;
            
            public SEVERITYRowChangeEvent(SEVERITYRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SEVERITYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
