//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace bugtracker {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class m_dataSet : DataSet {
        
        private PRIORITYDataTable tablePRIORITY;
        
        private MESSAGESDataTable tableMESSAGES;
        
        private USERSDataTable tableUSERS;
        
        private VIEW_BUGSDataTable tableVIEW_BUGS;
        
        private VIEW_MESSAGESDataTable tableVIEW_MESSAGES;
        
        public m_dataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected m_dataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PRIORITY"] != null)) {
                    this.Tables.Add(new PRIORITYDataTable(ds.Tables["PRIORITY"]));
                }
                if ((ds.Tables["MESSAGES"] != null)) {
                    this.Tables.Add(new MESSAGESDataTable(ds.Tables["MESSAGES"]));
                }
                if ((ds.Tables["USERS"] != null)) {
                    this.Tables.Add(new USERSDataTable(ds.Tables["USERS"]));
                }
                if ((ds.Tables["VIEW_BUGS"] != null)) {
                    this.Tables.Add(new VIEW_BUGSDataTable(ds.Tables["VIEW_BUGS"]));
                }
                if ((ds.Tables["VIEW_MESSAGES"] != null)) {
                    this.Tables.Add(new VIEW_MESSAGESDataTable(ds.Tables["VIEW_MESSAGES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PRIORITYDataTable PRIORITY {
            get {
                return this.tablePRIORITY;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MESSAGESDataTable MESSAGES {
            get {
                return this.tableMESSAGES;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USERSDataTable USERS {
            get {
                return this.tableUSERS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VIEW_BUGSDataTable VIEW_BUGS {
            get {
                return this.tableVIEW_BUGS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VIEW_MESSAGESDataTable VIEW_MESSAGES {
            get {
                return this.tableVIEW_MESSAGES;
            }
        }
        
        public override DataSet Clone() {
            m_dataSet cln = ((m_dataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PRIORITY"] != null)) {
                this.Tables.Add(new PRIORITYDataTable(ds.Tables["PRIORITY"]));
            }
            if ((ds.Tables["MESSAGES"] != null)) {
                this.Tables.Add(new MESSAGESDataTable(ds.Tables["MESSAGES"]));
            }
            if ((ds.Tables["USERS"] != null)) {
                this.Tables.Add(new USERSDataTable(ds.Tables["USERS"]));
            }
            if ((ds.Tables["VIEW_BUGS"] != null)) {
                this.Tables.Add(new VIEW_BUGSDataTable(ds.Tables["VIEW_BUGS"]));
            }
            if ((ds.Tables["VIEW_MESSAGES"] != null)) {
                this.Tables.Add(new VIEW_MESSAGESDataTable(ds.Tables["VIEW_MESSAGES"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePRIORITY = ((PRIORITYDataTable)(this.Tables["PRIORITY"]));
            if ((this.tablePRIORITY != null)) {
                this.tablePRIORITY.InitVars();
            }
            this.tableMESSAGES = ((MESSAGESDataTable)(this.Tables["MESSAGES"]));
            if ((this.tableMESSAGES != null)) {
                this.tableMESSAGES.InitVars();
            }
            this.tableUSERS = ((USERSDataTable)(this.Tables["USERS"]));
            if ((this.tableUSERS != null)) {
                this.tableUSERS.InitVars();
            }
            this.tableVIEW_BUGS = ((VIEW_BUGSDataTable)(this.Tables["VIEW_BUGS"]));
            if ((this.tableVIEW_BUGS != null)) {
                this.tableVIEW_BUGS.InitVars();
            }
            this.tableVIEW_MESSAGES = ((VIEW_MESSAGESDataTable)(this.Tables["VIEW_MESSAGES"]));
            if ((this.tableVIEW_MESSAGES != null)) {
                this.tableVIEW_MESSAGES.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "m_dataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/m_dataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePRIORITY = new PRIORITYDataTable();
            this.Tables.Add(this.tablePRIORITY);
            this.tableMESSAGES = new MESSAGESDataTable();
            this.Tables.Add(this.tableMESSAGES);
            this.tableUSERS = new USERSDataTable();
            this.Tables.Add(this.tableUSERS);
            this.tableVIEW_BUGS = new VIEW_BUGSDataTable();
            this.Tables.Add(this.tableVIEW_BUGS);
            this.tableVIEW_MESSAGES = new VIEW_MESSAGESDataTable();
            this.Tables.Add(this.tableVIEW_MESSAGES);
        }
        
        private bool ShouldSerializePRIORITY() {
            return false;
        }
        
        private bool ShouldSerializeMESSAGES() {
            return false;
        }
        
        private bool ShouldSerializeUSERS() {
            return false;
        }
        
        private bool ShouldSerializeVIEW_BUGS() {
            return false;
        }
        
        private bool ShouldSerializeVIEW_MESSAGES() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PRIORITYRowChangeEventHandler(object sender, PRIORITYRowChangeEvent e);
        
        public delegate void MESSAGESRowChangeEventHandler(object sender, MESSAGESRowChangeEvent e);
        
        public delegate void USERSRowChangeEventHandler(object sender, USERSRowChangeEvent e);
        
        public delegate void VIEW_BUGSRowChangeEventHandler(object sender, VIEW_BUGSRowChangeEvent e);
        
        public delegate void VIEW_MESSAGESRowChangeEventHandler(object sender, VIEW_MESSAGESRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PRIORITYDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnNAME;
            
            private DataColumn columnDESCRIPTION;
            
            internal PRIORITYDataTable() : 
                    base("PRIORITY") {
                this.InitClass();
            }
            
            internal PRIORITYDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            internal DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            public PRIORITYRow this[int index] {
                get {
                    return ((PRIORITYRow)(this.Rows[index]));
                }
            }
            
            public event PRIORITYRowChangeEventHandler PRIORITYRowChanged;
            
            public event PRIORITYRowChangeEventHandler PRIORITYRowChanging;
            
            public event PRIORITYRowChangeEventHandler PRIORITYRowDeleted;
            
            public event PRIORITYRowChangeEventHandler PRIORITYRowDeleting;
            
            public void AddPRIORITYRow(PRIORITYRow row) {
                this.Rows.Add(row);
            }
            
            public PRIORITYRow AddPRIORITYRow(System.Guid ID, string NAME, string DESCRIPTION) {
                PRIORITYRow rowPRIORITYRow = ((PRIORITYRow)(this.NewRow()));
                rowPRIORITYRow.ItemArray = new object[] {
                        ID,
                        NAME,
                        DESCRIPTION};
                this.Rows.Add(rowPRIORITYRow);
                return rowPRIORITYRow;
            }
            
            public PRIORITYRow FindByID(System.Guid ID) {
                return ((PRIORITYRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PRIORITYDataTable cln = ((PRIORITYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PRIORITYDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnNAME = this.Columns["NAME"];
                this.columnDESCRIPTION = this.Columns["DESCRIPTION"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnNAME = new DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNAME);
                this.columnDESCRIPTION = new DataColumn("DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDESCRIPTION);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
            }
            
            public PRIORITYRow NewPRIORITYRow() {
                return ((PRIORITYRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PRIORITYRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PRIORITYRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PRIORITYRowChanged != null)) {
                    this.PRIORITYRowChanged(this, new PRIORITYRowChangeEvent(((PRIORITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PRIORITYRowChanging != null)) {
                    this.PRIORITYRowChanging(this, new PRIORITYRowChangeEvent(((PRIORITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PRIORITYRowDeleted != null)) {
                    this.PRIORITYRowDeleted(this, new PRIORITYRowChangeEvent(((PRIORITYRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PRIORITYRowDeleting != null)) {
                    this.PRIORITYRowDeleting(this, new PRIORITYRowChangeEvent(((PRIORITYRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePRIORITYRow(PRIORITYRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PRIORITYRow : DataRow {
            
            private PRIORITYDataTable tablePRIORITY;
            
            internal PRIORITYRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePRIORITY = ((PRIORITYDataTable)(this.Table));
            }
            
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tablePRIORITY.IDColumn]));
                }
                set {
                    this[this.tablePRIORITY.IDColumn] = value;
                }
            }
            
            public string NAME {
                get {
                    return ((string)(this[this.tablePRIORITY.NAMEColumn]));
                }
                set {
                    this[this.tablePRIORITY.NAMEColumn] = value;
                }
            }
            
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tablePRIORITY.DESCRIPTIONColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePRIORITY.DESCRIPTIONColumn] = value;
                }
            }
            
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tablePRIORITY.DESCRIPTIONColumn);
            }
            
            public void SetDESCRIPTIONNull() {
                this[this.tablePRIORITY.DESCRIPTIONColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PRIORITYRowChangeEvent : EventArgs {
            
            private PRIORITYRow eventRow;
            
            private DataRowAction eventAction;
            
            public PRIORITYRowChangeEvent(PRIORITYRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PRIORITYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MESSAGESDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnBUGID;
            
            private DataColumn columnUSERID;
            
            private DataColumn columnCONTENT;
            
            private DataColumn columnPOSTEDTIME;
            
            internal MESSAGESDataTable() : 
                    base("MESSAGES") {
                this.InitClass();
            }
            
            internal MESSAGESDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn BUGIDColumn {
                get {
                    return this.columnBUGID;
                }
            }
            
            internal DataColumn USERIDColumn {
                get {
                    return this.columnUSERID;
                }
            }
            
            internal DataColumn CONTENTColumn {
                get {
                    return this.columnCONTENT;
                }
            }
            
            internal DataColumn POSTEDTIMEColumn {
                get {
                    return this.columnPOSTEDTIME;
                }
            }
            
            public MESSAGESRow this[int index] {
                get {
                    return ((MESSAGESRow)(this.Rows[index]));
                }
            }
            
            public event MESSAGESRowChangeEventHandler MESSAGESRowChanged;
            
            public event MESSAGESRowChangeEventHandler MESSAGESRowChanging;
            
            public event MESSAGESRowChangeEventHandler MESSAGESRowDeleted;
            
            public event MESSAGESRowChangeEventHandler MESSAGESRowDeleting;
            
            public void AddMESSAGESRow(MESSAGESRow row) {
                this.Rows.Add(row);
            }
            
            public MESSAGESRow AddMESSAGESRow(System.Guid ID, int BUGID, System.Guid USERID, string CONTENT, System.DateTime POSTEDTIME) {
                MESSAGESRow rowMESSAGESRow = ((MESSAGESRow)(this.NewRow()));
                rowMESSAGESRow.ItemArray = new object[] {
                        ID,
                        BUGID,
                        USERID,
                        CONTENT,
                        POSTEDTIME};
                this.Rows.Add(rowMESSAGESRow);
                return rowMESSAGESRow;
            }
            
            public MESSAGESRow FindByID(System.Guid ID) {
                return ((MESSAGESRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MESSAGESDataTable cln = ((MESSAGESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MESSAGESDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnBUGID = this.Columns["BUGID"];
                this.columnUSERID = this.Columns["USERID"];
                this.columnCONTENT = this.Columns["CONTENT"];
                this.columnPOSTEDTIME = this.Columns["POSTEDTIME"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnBUGID = new DataColumn("BUGID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBUGID);
                this.columnUSERID = new DataColumn("USERID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUSERID);
                this.columnCONTENT = new DataColumn("CONTENT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCONTENT);
                this.columnPOSTEDTIME = new DataColumn("POSTEDTIME", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPOSTEDTIME);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnBUGID.AllowDBNull = false;
                this.columnUSERID.AllowDBNull = false;
                this.columnCONTENT.AllowDBNull = false;
                this.columnPOSTEDTIME.AllowDBNull = false;
            }
            
            public MESSAGESRow NewMESSAGESRow() {
                return ((MESSAGESRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MESSAGESRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MESSAGESRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MESSAGESRowChanged != null)) {
                    this.MESSAGESRowChanged(this, new MESSAGESRowChangeEvent(((MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MESSAGESRowChanging != null)) {
                    this.MESSAGESRowChanging(this, new MESSAGESRowChangeEvent(((MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MESSAGESRowDeleted != null)) {
                    this.MESSAGESRowDeleted(this, new MESSAGESRowChangeEvent(((MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MESSAGESRowDeleting != null)) {
                    this.MESSAGESRowDeleting(this, new MESSAGESRowChangeEvent(((MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMESSAGESRow(MESSAGESRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MESSAGESRow : DataRow {
            
            private MESSAGESDataTable tableMESSAGES;
            
            internal MESSAGESRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMESSAGES = ((MESSAGESDataTable)(this.Table));
            }
            
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tableMESSAGES.IDColumn]));
                }
                set {
                    this[this.tableMESSAGES.IDColumn] = value;
                }
            }
            
            public int BUGID {
                get {
                    return ((int)(this[this.tableMESSAGES.BUGIDColumn]));
                }
                set {
                    this[this.tableMESSAGES.BUGIDColumn] = value;
                }
            }
            
            public System.Guid USERID {
                get {
                    return ((System.Guid)(this[this.tableMESSAGES.USERIDColumn]));
                }
                set {
                    this[this.tableMESSAGES.USERIDColumn] = value;
                }
            }
            
            public string CONTENT {
                get {
                    return ((string)(this[this.tableMESSAGES.CONTENTColumn]));
                }
                set {
                    this[this.tableMESSAGES.CONTENTColumn] = value;
                }
            }
            
            public System.DateTime POSTEDTIME {
                get {
                    return ((System.DateTime)(this[this.tableMESSAGES.POSTEDTIMEColumn]));
                }
                set {
                    this[this.tableMESSAGES.POSTEDTIMEColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MESSAGESRowChangeEvent : EventArgs {
            
            private MESSAGESRow eventRow;
            
            private DataRowAction eventAction;
            
            public MESSAGESRowChangeEvent(MESSAGESRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MESSAGESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class USERSDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnFIRSTNAME;
            
            internal USERSDataTable() : 
                    base("USERS") {
                this.InitClass();
            }
            
            internal USERSDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn FIRSTNAMEColumn {
                get {
                    return this.columnFIRSTNAME;
                }
            }
            
            public USERSRow this[int index] {
                get {
                    return ((USERSRow)(this.Rows[index]));
                }
            }
            
            public event USERSRowChangeEventHandler USERSRowChanged;
            
            public event USERSRowChangeEventHandler USERSRowChanging;
            
            public event USERSRowChangeEventHandler USERSRowDeleted;
            
            public event USERSRowChangeEventHandler USERSRowDeleting;
            
            public void AddUSERSRow(USERSRow row) {
                this.Rows.Add(row);
            }
            
            public USERSRow AddUSERSRow(System.Guid ID, string FIRSTNAME) {
                USERSRow rowUSERSRow = ((USERSRow)(this.NewRow()));
                rowUSERSRow.ItemArray = new object[] {
                        ID,
                        FIRSTNAME};
                this.Rows.Add(rowUSERSRow);
                return rowUSERSRow;
            }
            
            public USERSRow FindByID(System.Guid ID) {
                return ((USERSRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                USERSDataTable cln = ((USERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new USERSDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnFIRSTNAME = this.Columns["FIRSTNAME"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnFIRSTNAME = new DataColumn("FIRSTNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFIRSTNAME);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnFIRSTNAME.AllowDBNull = false;
            }
            
            public USERSRow NewUSERSRow() {
                return ((USERSRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new USERSRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(USERSRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USERSRowChanged != null)) {
                    this.USERSRowChanged(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USERSRowChanging != null)) {
                    this.USERSRowChanging(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USERSRowDeleted != null)) {
                    this.USERSRowDeleted(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USERSRowDeleting != null)) {
                    this.USERSRowDeleting(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUSERSRow(USERSRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class USERSRow : DataRow {
            
            private USERSDataTable tableUSERS;
            
            internal USERSRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSERS = ((USERSDataTable)(this.Table));
            }
            
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tableUSERS.IDColumn]));
                }
                set {
                    this[this.tableUSERS.IDColumn] = value;
                }
            }
            
            public string FIRSTNAME {
                get {
                    return ((string)(this[this.tableUSERS.FIRSTNAMEColumn]));
                }
                set {
                    this[this.tableUSERS.FIRSTNAMEColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class USERSRowChangeEvent : EventArgs {
            
            private USERSRow eventRow;
            
            private DataRowAction eventAction;
            
            public USERSRowChangeEvent(USERSRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public USERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_BUGSDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProjectID;
            
            private DataColumn columnTitle;
            
            private DataColumn columnID;
            
            private DataColumn columnPriority;
            
            private DataColumn columnSeverity;
            
            private DataColumn columnStatus;
            
            private DataColumn columnAssigned;
            
            private DataColumn columnDESCRIPTION;
            
            private DataColumn columnColor;
            
            private DataColumn columnName;
            
            internal VIEW_BUGSDataTable() : 
                    base("VIEW_BUGS") {
                this.InitClass();
            }
            
            internal VIEW_BUGSDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            internal DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            internal DataColumn SeverityColumn {
                get {
                    return this.columnSeverity;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn AssignedColumn {
                get {
                    return this.columnAssigned;
                }
            }
            
            internal DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            internal DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public VIEW_BUGSRow this[int index] {
                get {
                    return ((VIEW_BUGSRow)(this.Rows[index]));
                }
            }
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowChanged;
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowChanging;
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowDeleted;
            
            public event VIEW_BUGSRowChangeEventHandler VIEW_BUGSRowDeleting;
            
            public void AddVIEW_BUGSRow(VIEW_BUGSRow row) {
                this.Rows.Add(row);
            }
            
            public VIEW_BUGSRow AddVIEW_BUGSRow(int ProjectID, string Title, string Priority, string Severity, string Status, string Assigned, string DESCRIPTION, string Color, string Name) {
                VIEW_BUGSRow rowVIEW_BUGSRow = ((VIEW_BUGSRow)(this.NewRow()));
                rowVIEW_BUGSRow.ItemArray = new object[] {
                        ProjectID,
                        Title,
                        null,
                        Priority,
                        Severity,
                        Status,
                        Assigned,
                        DESCRIPTION,
                        Color,
                        Name};
                this.Rows.Add(rowVIEW_BUGSRow);
                return rowVIEW_BUGSRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VIEW_BUGSDataTable cln = ((VIEW_BUGSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VIEW_BUGSDataTable();
            }
            
            internal void InitVars() {
                this.columnProjectID = this.Columns["ProjectID"];
                this.columnTitle = this.Columns["Title"];
                this.columnID = this.Columns["ID"];
                this.columnPriority = this.Columns["Priority"];
                this.columnSeverity = this.Columns["Severity"];
                this.columnStatus = this.Columns["Status"];
                this.columnAssigned = this.Columns["Assigned"];
                this.columnDESCRIPTION = this.Columns["DESCRIPTION"];
                this.columnColor = this.Columns["Color"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectID);
                this.columnTitle = new DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnPriority = new DataColumn("Priority", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriority);
                this.columnSeverity = new DataColumn("Severity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSeverity);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnAssigned = new DataColumn("Assigned", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssigned);
                this.columnDESCRIPTION = new DataColumn("DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDESCRIPTION);
                this.columnColor = new DataColumn("Color", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColor);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnProjectID.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnDESCRIPTION.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            public VIEW_BUGSRow NewVIEW_BUGSRow() {
                return ((VIEW_BUGSRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VIEW_BUGSRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VIEW_BUGSRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VIEW_BUGSRowChanged != null)) {
                    this.VIEW_BUGSRowChanged(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VIEW_BUGSRowChanging != null)) {
                    this.VIEW_BUGSRowChanging(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VIEW_BUGSRowDeleted != null)) {
                    this.VIEW_BUGSRowDeleted(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VIEW_BUGSRowDeleting != null)) {
                    this.VIEW_BUGSRowDeleting(this, new VIEW_BUGSRowChangeEvent(((VIEW_BUGSRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVIEW_BUGSRow(VIEW_BUGSRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_BUGSRow : DataRow {
            
            private VIEW_BUGSDataTable tableVIEW_BUGS;
            
            internal VIEW_BUGSRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVIEW_BUGS = ((VIEW_BUGSDataTable)(this.Table));
            }
            
            public int ProjectID {
                get {
                    return ((int)(this[this.tableVIEW_BUGS.ProjectIDColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.ProjectIDColumn] = value;
                }
            }
            
            public string Title {
                get {
                    return ((string)(this[this.tableVIEW_BUGS.TitleColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.TitleColumn] = value;
                }
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableVIEW_BUGS.IDColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.IDColumn] = value;
                }
            }
            
            public string Priority {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.PriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.PriorityColumn] = value;
                }
            }
            
            public string Severity {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.SeverityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.SeverityColumn] = value;
                }
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.StatusColumn] = value;
                }
            }
            
            public string Assigned {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.AssignedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.AssignedColumn] = value;
                }
            }
            
            public string DESCRIPTION {
                get {
                    return ((string)(this[this.tableVIEW_BUGS.DESCRIPTIONColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.DESCRIPTIONColumn] = value;
                }
            }
            
            public string Color {
                get {
                    try {
                        return ((string)(this[this.tableVIEW_BUGS.ColorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVIEW_BUGS.ColorColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableVIEW_BUGS.NameColumn]));
                }
                set {
                    this[this.tableVIEW_BUGS.NameColumn] = value;
                }
            }
            
            public bool IsPriorityNull() {
                return this.IsNull(this.tableVIEW_BUGS.PriorityColumn);
            }
            
            public void SetPriorityNull() {
                this[this.tableVIEW_BUGS.PriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsSeverityNull() {
                return this.IsNull(this.tableVIEW_BUGS.SeverityColumn);
            }
            
            public void SetSeverityNull() {
                this[this.tableVIEW_BUGS.SeverityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableVIEW_BUGS.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableVIEW_BUGS.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignedNull() {
                return this.IsNull(this.tableVIEW_BUGS.AssignedColumn);
            }
            
            public void SetAssignedNull() {
                this[this.tableVIEW_BUGS.AssignedColumn] = System.Convert.DBNull;
            }
            
            public bool IsColorNull() {
                return this.IsNull(this.tableVIEW_BUGS.ColorColumn);
            }
            
            public void SetColorNull() {
                this[this.tableVIEW_BUGS.ColorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_BUGSRowChangeEvent : EventArgs {
            
            private VIEW_BUGSRow eventRow;
            
            private DataRowAction eventAction;
            
            public VIEW_BUGSRowChangeEvent(VIEW_BUGSRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VIEW_BUGSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_MESSAGESDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCONTENT;
            
            private DataColumn columnPOSTEDTIME;
            
            private DataColumn columnBUGID;
            
            internal VIEW_MESSAGESDataTable() : 
                    base("VIEW_MESSAGES") {
                this.InitClass();
            }
            
            internal VIEW_MESSAGESDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CONTENTColumn {
                get {
                    return this.columnCONTENT;
                }
            }
            
            internal DataColumn POSTEDTIMEColumn {
                get {
                    return this.columnPOSTEDTIME;
                }
            }
            
            internal DataColumn BUGIDColumn {
                get {
                    return this.columnBUGID;
                }
            }
            
            public VIEW_MESSAGESRow this[int index] {
                get {
                    return ((VIEW_MESSAGESRow)(this.Rows[index]));
                }
            }
            
            public event VIEW_MESSAGESRowChangeEventHandler VIEW_MESSAGESRowChanged;
            
            public event VIEW_MESSAGESRowChangeEventHandler VIEW_MESSAGESRowChanging;
            
            public event VIEW_MESSAGESRowChangeEventHandler VIEW_MESSAGESRowDeleted;
            
            public event VIEW_MESSAGESRowChangeEventHandler VIEW_MESSAGESRowDeleting;
            
            public void AddVIEW_MESSAGESRow(VIEW_MESSAGESRow row) {
                this.Rows.Add(row);
            }
            
            public VIEW_MESSAGESRow AddVIEW_MESSAGESRow(string CONTENT, System.DateTime POSTEDTIME, int BUGID) {
                VIEW_MESSAGESRow rowVIEW_MESSAGESRow = ((VIEW_MESSAGESRow)(this.NewRow()));
                rowVIEW_MESSAGESRow.ItemArray = new object[] {
                        CONTENT,
                        POSTEDTIME,
                        BUGID};
                this.Rows.Add(rowVIEW_MESSAGESRow);
                return rowVIEW_MESSAGESRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VIEW_MESSAGESDataTable cln = ((VIEW_MESSAGESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VIEW_MESSAGESDataTable();
            }
            
            internal void InitVars() {
                this.columnCONTENT = this.Columns["CONTENT"];
                this.columnPOSTEDTIME = this.Columns["POSTEDTIME"];
                this.columnBUGID = this.Columns["BUGID"];
            }
            
            private void InitClass() {
                this.columnCONTENT = new DataColumn("CONTENT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCONTENT);
                this.columnPOSTEDTIME = new DataColumn("POSTEDTIME", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPOSTEDTIME);
                this.columnBUGID = new DataColumn("BUGID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBUGID);
                this.columnCONTENT.AllowDBNull = false;
                this.columnPOSTEDTIME.AllowDBNull = false;
                this.columnBUGID.AllowDBNull = false;
            }
            
            public VIEW_MESSAGESRow NewVIEW_MESSAGESRow() {
                return ((VIEW_MESSAGESRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VIEW_MESSAGESRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VIEW_MESSAGESRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VIEW_MESSAGESRowChanged != null)) {
                    this.VIEW_MESSAGESRowChanged(this, new VIEW_MESSAGESRowChangeEvent(((VIEW_MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VIEW_MESSAGESRowChanging != null)) {
                    this.VIEW_MESSAGESRowChanging(this, new VIEW_MESSAGESRowChangeEvent(((VIEW_MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VIEW_MESSAGESRowDeleted != null)) {
                    this.VIEW_MESSAGESRowDeleted(this, new VIEW_MESSAGESRowChangeEvent(((VIEW_MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VIEW_MESSAGESRowDeleting != null)) {
                    this.VIEW_MESSAGESRowDeleting(this, new VIEW_MESSAGESRowChangeEvent(((VIEW_MESSAGESRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVIEW_MESSAGESRow(VIEW_MESSAGESRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_MESSAGESRow : DataRow {
            
            private VIEW_MESSAGESDataTable tableVIEW_MESSAGES;
            
            internal VIEW_MESSAGESRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVIEW_MESSAGES = ((VIEW_MESSAGESDataTable)(this.Table));
            }
            
            public string CONTENT {
                get {
                    return ((string)(this[this.tableVIEW_MESSAGES.CONTENTColumn]));
                }
                set {
                    this[this.tableVIEW_MESSAGES.CONTENTColumn] = value;
                }
            }
            
            public System.DateTime POSTEDTIME {
                get {
                    return ((System.DateTime)(this[this.tableVIEW_MESSAGES.POSTEDTIMEColumn]));
                }
                set {
                    this[this.tableVIEW_MESSAGES.POSTEDTIMEColumn] = value;
                }
            }
            
            public int BUGID {
                get {
                    return ((int)(this[this.tableVIEW_MESSAGES.BUGIDColumn]));
                }
                set {
                    this[this.tableVIEW_MESSAGES.BUGIDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VIEW_MESSAGESRowChangeEvent : EventArgs {
            
            private VIEW_MESSAGESRow eventRow;
            
            private DataRowAction eventAction;
            
            public VIEW_MESSAGESRowChangeEvent(VIEW_MESSAGESRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VIEW_MESSAGESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
